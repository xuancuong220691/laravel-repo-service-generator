<?php

namespace App\Services;

use App\Services\Contracts\BaseServiceInterface;

abstract class BaseService implements BaseServiceInterface
{
    abstract protected function getRepository();

    public function getAll(array $relations = [])
    {
        return $this->getRepository()->getAll($relations);
    }

   public function get(?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->get($fields, $relations);
    }

    public function find($id, ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->find($id, $fields, $relations);
    }

    public function findBy(string $key, $value, ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->findBy($key, $value, $fields, $relations);
    }

    public function findByAttributes(array $conditions, ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->findByAttributes($conditions, $fields, $relations);
    }

    public function getBy(string $key, $value, ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->getBy($key, $value, $fields, $relations);
    }

    public function getByAttributes(array $conditions, ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->getByAttributes($conditions, $fields, $relations);
    }

    public function existsBy(string $field, $value): bool
    {
        return $this->getRepository()->existsBy($field, $value);
    }

    public function paginate(int $perPage = 15, array $conditions = [], ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->paginate($perPage, $conditions, $fields, $relations);
    }

    public function existsByAttributes(array $conditions): bool
    {
        return $this->getRepository()->existsByAttributes($conditions);
    }

    public function create(array $data)
    {
        return $this->getRepository()->create($data);
    }

    public function update($id, array $data)
    {
        return $this->getRepository()->update($id, $data);
    }

    public function updateFields($model, array $fields, array $except = [])
    {
        return $this->getRepository()->updateFields($model, $fields, $except);
    }

    public function createOrUpdate(array $attributes, array $values = [], array $checkFields = [])
    {
        return $this->getRepository()->createOrUpdate($attributes, $values, $checkFields);
    }

    public function delete($id)
    {
        return $this->getRepository()->delete($id);
    }

    public function deleteBy(array $conditions)
    {
        return $this->getRepository()->deleteBy($conditions);
    }

    public function withTrashed(array $conditions = [], ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->withTrashed($conditions, $fields, $relations);
    }

    public function onlyTrashed(array $conditions = [], ?array $fields = null, array $relations = [])
    {
        return $this->getRepository()->onlyTrashed($conditions, $fields, $relations);
    }

    public function restore($id): bool
    {
        return $this->getRepository()->restore($id);
    }

    public function forceDelete($id): bool
    {
        return $this->getRepository()->forceDelete($id);
    }
}
